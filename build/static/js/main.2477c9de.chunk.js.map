{"version":3,"sources":["serviceWorker.js","demoData.js","actions/index.js","components/toolbar.js","components/input.js","components/calender.js","components/app.js","reducers/index.js","reducers/reducer_events.js","index.js"],"names":["Boolean","window","location","hostname","match","eventData","id","title","start","Date","end","FETCH_EVENTS","CREATE_EVENT","UPDATE_EVENT","DELETE_EVENT","PAST_EVENTS","UPCOMING_EVENTS","fetchEvents","localStorage","getItem","setItem","JSON","stringify","events","parse","type","payload","createEvent","values","push","updateEvent","_","findIndex","deleteEvent","index","splice","pastEvents","filter","item","moment","format","upcomingEvents","navigate","CustomToolbar","action","_this","props","onNavigate","this","_this2","_this$props","label","localizer","messages","react_default","a","createElement","className","onClick","bind","e","onClickAllEvents","onClickPastEvents","onClickUpcomingEvents","Component","connect","state","dispatch","bindActionCreators","Input","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","value","defaultValue","onChange","onInputChange","prevProps","prevState","target","setState","placeholder","MyCalendar","momentLocalizer","Calendar","onSelectEventHandler","slotInfo","Popup","create","content","renderEventContent","buttons","right","text","close","openPopupForm","assertThisInitialized","onSelectEventSlotHandler","newEvent","popupTitle","hasOwnProperty","input","left","date","event","isSelected","style","backgroundColor","lib_default","popup","selectable","defaultView","Views","MONTH","components","toolbar","views","height","eventPropGetter","eventStyleGetter","onSelectEvent","onSelectSlot","dist_default","App","calender","rootReducer","combineReducers","arguments","length","undefined","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","es","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2477c9de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//DEMO EVENTS DATA\r\nexport const eventData =  [\r\n    {\r\n        id: 1,\r\n        title: 'Board meeting',\r\n        location: 'Dhaka, Bangladesh',\r\n        start: new Date(2018, 9, 4, 9, 0, 0),\r\n        end: new Date(2018, 9, 4, 13, 0, 0)\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Team lead meeting',\r\n        location: 'Rajshahi, Bangladesh',\r\n        start: new Date(2018, 9, 15, 9, 0, 0),\r\n        end: new Date(2018, 9, 15, 13, 0, 0)\r\n    },\r\n    {\r\n        id: 3,\r\n        title: 'Coxbazar Tour',\r\n        location: 'Coxbazar, Bangladesh',\r\n        start: new Date(2018, 9, 30, 8, 30, 0),\r\n        end: new Date(2018, 9, 30, 12, 30, 0)\r\n    },\r\n    {\r\n        id: 4,\r\n        title: \"JoomShaper's Event\",\r\n        location: 'Dhanmondi, Dhaka',\r\n        start: new Date(2018, 10, 2, 8, 30, 0),\r\n        end: new Date(2018, 10, 2, 12, 30, 0)\r\n    }\r\n];\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { eventData } from '../demoData'\r\n\r\n//EXPORT ALL ACTION TYPES\r\nexport const FETCH_EVENTS = 'fetch_events';\r\nexport const CREATE_EVENT = 'create_event';\r\nexport const UPDATE_EVENT = 'update_event';\r\nexport const DELETE_EVENT = 'delete_event';\r\nexport const PAST_EVENTS = 'past_events';\r\nexport const UPCOMING_EVENTS = 'upcoming_events';\r\n\r\n//FETCH EVENTS FROM LOCAL STORAGE\r\nexport function fetchEvents() {\r\n    if(!localStorage.getItem('events')) {\r\n        localStorage.setItem('events', JSON.stringify(eventData)); // If storage is empty set demo data\r\n    }\r\n    let events = JSON.parse(localStorage.getItem('events')); //Get data from Storage\r\n    return {\r\n        type: FETCH_EVENTS,\r\n        payload: events\r\n    }\r\n}\r\n\r\n//CREATE NEW EVENT ACTION\r\nexport function createEvent(values) {\r\n    let events = JSON.parse(localStorage.getItem('events'));\r\n    events.push(values); //Push New Item\r\n    localStorage.setItem('events', JSON.stringify(events)); //Update Storage\r\n    return {\r\n        type: CREATE_EVENT,\r\n        payload: events\r\n    }\r\n}\r\n\r\n//UPDATE EVENT ACTION\r\nexport function updateEvent(values) {\r\n    let events = JSON.parse(localStorage.getItem('events')); //Get data from Storage\r\n    let index = _.findIndex(events, { 'id': values.id});\r\n    events[index] = values; //Update Item\r\n    localStorage.setItem('events', JSON.stringify(events)); //Update Storage\r\n    return {\r\n        type: UPDATE_EVENT,\r\n        payload: events\r\n    }\r\n}\r\n\r\n//DELETE EVENT ACTION\r\nexport function deleteEvent(id) {\r\n    let events = JSON.parse(localStorage.getItem('events')); //Get data from Storage\r\n    let index = _.findIndex(events, { 'id': id});\r\n    events.splice(index, 1); //Remove Item\r\n    localStorage.setItem('events', JSON.stringify(events)); //Update Storage\r\n    return {\r\n        type: DELETE_EVENT,\r\n        payload: events\r\n    }\r\n}\r\n\r\n//GET ALL PAST EVENTS ACTION\r\nexport function pastEvents() {\r\n    let events = JSON.parse(localStorage.getItem('events')); //Get data from Storage\r\n    events = _.filter(events, (item) => (moment().format('YYYY MM DD') > moment(item.start).format('YYYY MM DD')) ? true : false);\r\n    return {\r\n        type: PAST_EVENTS,\r\n        payload: events\r\n    }\r\n}\r\n\r\n//GET ALL UPCOMING EVENTS ACTION\r\nexport function upcomingEvents() {\r\n    let events = JSON.parse(localStorage.getItem('events')); //Get data from Storage\r\n    events = _.filter(events, (item) => (moment().format('YYYY MM DD') < moment(item.start).format('YYYY MM DD')) ? true : false);\r\n    return {\r\n        type: UPCOMING_EVENTS,\r\n        payload: events\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { fetchEvents, pastEvents, upcomingEvents } from '../actions';\r\n\r\nconst navigate = {\r\n    PREVIOUS: 'PREV',\r\n    NEXT: 'NEXT',\r\n    TODAY: 'TODAY',\r\n    DATE: 'DATE',\r\n}\r\n\r\nclass CustomToolbar extends Component {\r\n\r\n    onClickAllEvents() {\r\n        this.props.fetchEvents();\r\n    };\r\n\r\n    onClickPastEvents() {\r\n        this.props.pastEvents();\r\n    };\r\n    \r\n    onClickUpcomingEvents() {\r\n        this.props.upcomingEvents();\r\n    };\r\n\r\n    render() {\r\n        let { localizer: { messages }, label } = this.props;\r\n        return(\r\n            <div className=\"rbc-toolbar\">\r\n                <span className=\"rbc-btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-control\" onClick={this.navigate.bind(null, navigate.PREVIOUS)}><i className=\"fa fa-arrow-left\"></i> Prev</button>\r\n                </span>\r\n                <span className=\"rbc-btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-control\" onClick={this.navigate.bind(null, navigate.NEXT)}>Next <i className=\"fa fa-arrow-right\"></i></button>\r\n                </span>\r\n                <span className=\"rbc-toolbar-label\">{label}</span>\r\n                <span className=\"rbc-btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-control\" onClick={(e) => this.onClickAllEvents()}>All</button>\r\n                </span>\r\n                <span className=\"rbc-btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-past\" onClick={(e) => this.onClickPastEvents()}>Past</button>\r\n                </span>\r\n                <span className=\"rbc-btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-upcoming\" onClick={(e) => this.onClickUpcomingEvents()}>Upcoming</button>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n    navigate = action => {\r\n        this.props.onNavigate(action)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        events: state.events\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ \r\n        fetchEvents,\r\n        pastEvents, \r\n        upcomingEvents \r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomToolbar);","import React, { Component } from 'react';\r\n\r\n/** The input content component */\r\nclass Input extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: this.props.defaultValue\r\n        };\r\n\r\n        this.onChange = (e) => this.onInputChange(e);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.value !== this.state.value) {\r\n            this.props.onChange(this.state.value);\r\n        }\r\n    }\r\n\r\n    onInputChange(e) {\r\n        let value = e.target.value;\r\n        this.setState({value: value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input type=\"text\" placeholder={this.props.placeholder} className=\"mm-popup__input\" value={this.state.value} onChange={this.onChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport MyCalendar from 'react-big-calendar';\r\nimport CustomToolbar from './toolbar';\r\nimport Popup from 'react-popup';\r\nimport Input from './input';\r\nimport moment from 'moment';\r\nimport { fetchEvents, createEvent, updateEvent, deleteEvent } from '../actions';\r\n\r\n\r\n// Setup the localizer by providing the moment (or globalize) Object to the correct localizer.\r\nconst localizer = MyCalendar.momentLocalizer(moment); // or globalizeLocalizer\r\n\r\nclass Calendar extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchEvents();\r\n    }\r\n\r\n    //RENDER SINGLE EVENT POPUP CONTENT\r\n    renderEventContent(slotInfo) {\r\n        const date = moment(slotInfo.start).format('MMMM D, YYYY');\r\n        return (\r\n            <div>\r\n                <p>Date: <strong>{date}</strong></p>\r\n                <p>Location: {slotInfo.location}</p>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    //ON SELECT EVENT HANDLER FUNCTION\r\n    onSelectEventHandler = (slotInfo) => {\r\n        Popup.create({\r\n            title: slotInfo.title,\r\n            content: this.renderEventContent(slotInfo),\r\n            buttons: {\r\n                right: [{\r\n                    text: 'Edit',\r\n                    className: 'info',\r\n                    action: function () {\r\n                        Popup.close(); //CLOSE PREVIOUS POPUP\r\n                        this.openPopupForm(slotInfo); //OPEN NEW EDIT POPUP\r\n                    }.bind(this)\r\n                }, {\r\n                    text: 'Delete',\r\n                    className: 'danger',\r\n                    action: function () {\r\n                        //CALL EVENT DELETE ACTION\r\n                        this.props.deleteEvent(slotInfo.id);\r\n                        Popup.close();\r\n                    }.bind(this)\r\n                }]\r\n            }\r\n        });\r\n    }\r\n\r\n    //HANDLE FUNCITON ON SELECT EVENT SLOT\r\n    onSelectEventSlotHandler = (slotInfo) => {\r\n        this.openPopupForm(slotInfo); //OPEN POPUP FOR CREATE/EDIT EVENT\r\n    }\r\n\r\n    //POPUP-FORM FUNCTION FOR CREATE AND EDIT EVENT\r\n    openPopupForm = (slotInfo) => {\r\n        let newEvent = false;\r\n        let popupTitle = \"Update Event\";\r\n        if(!slotInfo.hasOwnProperty('id')) {\r\n            slotInfo.id = moment().format('x');  //Generate id with Unix Millisecond Timestamp\r\n            slotInfo.title = null;\r\n            slotInfo.location = null;\r\n            popupTitle = \"Create Event\";\r\n            newEvent = true;\r\n        }\r\n\r\n        let titleChange = function (value) {\r\n            slotInfo.title = value;\r\n        };\r\n        let locationChange = function (value) {\r\n            slotInfo.location = value;\r\n        };\r\n        \r\n        Popup.create({\r\n            title: popupTitle,\r\n            content: <div>\r\n                        <Input onChange={titleChange} placeholder=\"Event Title\" defaultValue={slotInfo.title} />\r\n                        <Input onChange={locationChange} placeholder=\"Event Location\" defaultValue={slotInfo.location} />\r\n                    </div>,\r\n            buttons: {\r\n                left: ['cancel'],\r\n                right: [{\r\n                    text: 'Save',\r\n                    className: 'success',\r\n                    action: function () {\r\n                        //CHECK THE ID PROPERTY FOR CREATE/UPDATE\r\n                        if(newEvent) {\r\n                            this.props.createEvent(slotInfo); //EVENT CREATE ACTION\r\n                        } else {\r\n                            this.props.updateEvent(slotInfo); //EVENT UPDATE ACTION\r\n                        }\r\n                        Popup.close();\r\n                    }.bind(this)\r\n                }]\r\n            }\r\n        });\r\n    }\r\n\r\n    //EVENT STYLE GETTER FOR SLYLING AN EVENT ITEM\r\n    eventStyleGetter(event, start, end, isSelected) {\r\n        let current_time = moment().format('YYYY MM DD');\r\n        let event_time = moment(event.start).format('YYYY MM DD');\r\n        let background = (current_time>event_time) ? '#DE6987' : '#8CBD4C';\r\n        return {\r\n            style: {\r\n                backgroundColor: background\r\n            }\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"calendar-container\">\r\n                <MyCalendar\r\n                    popup\r\n                    selectable\r\n                    localizer={localizer}\r\n                    defaultView={MyCalendar.Views.MONTH}\r\n                    components={{toolbar: CustomToolbar}}\r\n                    views={['month']}\r\n                    style={{height: 600}}\r\n                    events={this.props.events}\r\n                    eventPropGetter={(this.eventStyleGetter)}\r\n                    onSelectEvent={(slotInfo) => this.onSelectEventHandler(slotInfo)}\r\n                    onSelectSlot={(slotInfo) => this.onSelectEventSlotHandler(slotInfo)}\r\n                />\r\n                <Popup />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        events: state.events\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ \r\n        fetchEvents, \r\n        createEvent, \r\n        updateEvent, \r\n        deleteEvent\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Calendar);\r\n","import React, { Component } from 'react';\nimport Calendar from './calender'\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div>\n                <Calendar />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport EventReducer from './reducer_events';\n\nconst rootReducer = combineReducers({\n    events: EventReducer\n});\n\nexport default rootReducer;\n","\r\nimport { FETCH_EVENTS, CREATE_EVENT, UPDATE_EVENT, DELETE_EVENT, PAST_EVENTS, UPCOMING_EVENTS } from \"../actions\";\r\n\r\nexport default function(state = [], action) {\r\n    switch(action.type) {\r\n        case FETCH_EVENTS:\r\n            return action.payload;\r\n\r\n        case CREATE_EVENT:\r\n            return action.payload;\r\n\r\n        case UPDATE_EVENT:\r\n            return action.payload;\r\n\r\n        case DELETE_EVENT:\r\n            return action.payload;\r\n\r\n        case PAST_EVENTS:\r\n            return action.payload;\r\n\r\n        case UPCOMING_EVENTS:\r\n            return action.payload;\r\n            \r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/app';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}